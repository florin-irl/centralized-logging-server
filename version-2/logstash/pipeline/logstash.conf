input {
  http {
    port => 8080
    codec => "json"
    add_field => { "input_source" => "http" }
  }

  tcp {
    port => 5000
    codec => "json"
    add_field => { "input_source" => "tcp" }
  }

  beats {
    port => 5044
    add_field => { "input_source" => "filebeat" }  # Explicitly mark Filebeat
  }

  file {
    path => "/nginx/logs/access.log"
    start_position => "beginning"
    sincedb_path => "/usr/share/logstash/data/plugins/inputs/file/sincedb_access"
    codec => json
    mode => "tail"
    stat_interval => 1
    discover_interval => 1
    add_field => { "source" => "DeltaService" }
  }
}

filter {
  # Standard service detection
  if [input_source] == "http" {
    mutate { add_field => { "source" => "AlphaService" } }
  } else if [input_source] == "tcp" {
    mutate { add_field => { "source" => "BetaService" } }
  }

  # 1) FLATTEN FIRST, LOWERCASE KEYS FROM PROPERTIES
  ruby {
    code => '
      if event.get("Properties")
        props = event.get("Properties")
        props.each do |k, v|
          event.set(k.downcase, v)
        end
        event.remove("Properties")
      end
    '
  }

  # 2) STANDARDIZE AFTER FLATTENING
  mutate {
    rename => ["Service", "service"]
    rename => ["Environment", "environment"]
    rename => ["TraceId", "traceid"]
    rename => ["SpanId", "spanid"]
    rename => ["RequestId", "requestid"]
    rename => ["CorrelationId", "correlationid"]
    rename => ["RequestPath", "requestpath"]
    rename => ["RequestMethod", "method"]
    rename => ["requestmethod", "method"]
    rename => ["StatusCode", "statuscode"]
    rename => ["Elapsed", "elapsed"]
    rename => ["ElapsedMilliseconds", "elapsed"]
    rename => ["ResponseBody", "responsebody"]
    rename => ["RequestBody", "requestbody"]
    rename => ["SourceContext", "sourcecontext"]
    rename => ["ActionId", "actionid"]
    rename => ["ActionName", "actionname"]
    rename => ["Timestamp", "timestamp"]
    rename => ["Level", "level"]
    rename => ["Message", "message"]
    rename => ["RenderedMessage", "message"]
    rename => ["MessageTemplate", "messagetemplate"]
  }


 mutate {
    rename => ["service", "service"]
    rename => ["environment", "environment"]
    rename => ["traceId", "traceid"]
    rename => ["spanId", "spanid"]
    rename => ["requestId", "requestid"]
    rename => ["correlationId", "correlationid"]
    rename => ["requestPath", "requestpath"]
    rename => ["requestMethod", "method"]
    rename => ["statusCode", "statuscode"]
    rename => ["elapsed", "elapsed"]
    rename => ["elapsedMilliseconds", "elapsed"]
    rename => ["responseBody", "responsebody"]
    rename => ["requestBody", "requestbody"]
    rename => ["sourceContext", "sourcecontext"]
    rename => ["actionId", "actionid"]
    rename => ["actionName", "actionname"]
    rename => ["timestamp", "timestamp"]
    rename => ["level", "level"]
    rename => ["message", "message"]
    rename => ["renderedMessage", "message"]
    rename => ["messageTemplate", "messagetemplate"]
  }

  # Ensure consistent timestamp
  date {
    match => ["timestamp", "ISO8601"]
    target => "@timestamp"
  }
}

filter {
  if [fields][source] == "CharlieService" {
    
    mutate {
      # Copy nested fields to top-level for easy querying
      add_field => {
        "source" => "%{[fields][source]}"
        "traceid" => "%{[contextMap][traceid]}"
        "spanid" => "%{[contextMap][spanid]}"
        "statuscode" => "%{[contextMap][statuscode]}"
        "method" => "%{[contextMap][method]}"
        "requestpath" => "%{[contextMap][url]}"
        "message" => "%{message}"
        "level" => "%{level}"
      }
    }

    mutate {
      remove_field => ["contextMap", "fields", "event", "agent", "log", "host", "ecs"]
    }
  }
}

output {
  stdout { codec => rubydebug }

  file {
    path => "/logs/centralized-log.json"
    codec => json_lines
  }

  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "centralized-logs-%{+YYYY.MM.dd}"
    user => "elastic"
    password => "PtXko=rH1dzKL2OlD_ow"
  }
}
